*VERTICES*


class Vertice:

  def __init__(self, rotulo, distancia_objetivo):
    self.rotulo = rotulo
    self.visitado = False
    self.distancia_objetivo = distancia_objetivo
    self.adjacentes = []

  def adiciona_adjacente(self, adjacente):
    self.adjacentes.append(adjacente)

  def mostra_adjacentes(self):
    for i in self.adjacentes:
      print(f'{i.vertice.rotulo} -> {i.custo}')

class Adjacente:
  def __init__(self, vertice, custo):
    self.vertice = vertice
    self.custo = custo

class Grafo:

porto_uniao = Vertice ('Porto_Uniao', 203)
paulo_fortini = Vertice ('Paulo_Fortini',172)
canoinhas = Vertice ('Canoinhas', 141)
tres_barras = Vertice ('Tres_Barras', 131)
sao_mateus_do_sul = Vertice ('Sao_Mateus_do_Sul', 123)
irati= Vertice ('Irati', 139)
curitiba= Vertice ('Curitiba',0)
palmeira= Vertice ('Palmeira', 59)
mafra= Vertice ('Mafra', 94)
campo_largo = Vertice ('Campo_Largo', 27)
balsa_nova= Vertice ('Balsa_Nova', 41)
lapa= Vertice ('Lapa', 74)
tijucas_do_sul= Vertice ('Tijucas_do_Sul', 56)
araucaria = Vertice ('Araucaria', 23)
sao_jose_dos_pinhais = Vertice (‘Sao_Jose_dos_Pinhas’ ,13 )
contenda = Vertice (‘Contenda’ ,39 )

  porto_uniao.adiciona_adjacente(Adjacente(paulo_fortini, 46))
  porto_uniao.adiciona_adjacente(Adjacente(são_mateus_do_sul, 87))
  porto_uniao.adiciona_adjacente(Adjacente(canoinhas, 78))


  paulo_fortini.adiciona_adjacente(Adjacente(porto_uniao, 46))
  paulo_fortini.adiciona_adjacente(Adjacente(irati, 75))

  canoinhas.adiciona_adjacente(Adjacente(porto_uniao, 46))
  canoinhas.adiciona_adjacente(Adjacente(três_barras, 12))
  canoinhas.adiciona_adjacente(Adjacente(mafra, 66))


  tres_barras.adiciona_adjacente(Adjacente(canoinhas, 12))
  três_barras.adiciona_adjacente(Adjacente(sao_mateus_do_sul, 43))
  
  sao_mateus_do_sul.adiciona_adjacente(Adjacente(três_barras, 43))
  sao_mateus_do_sul.adiciona_adjacente(Adjacente(porto_uniao, 87))
  sao_mateus_do_sul.adiciona_adjacente(Adjacente(lapa, 60))

sao_mateus_do_sul.adiciona_adjacente(Adjacente(três_barras, 43))
sao_mateus_do_sul.adiciona_adjacente(Adjacente(três_barras, 43))

irati.adiciona_adjacente(Adjacente(paulo_frontin, 75))
irati.adiciona_adjacente(Adjacente(sao_mateus_do_sul, 57))
irati.adiciona_adjacente(Adjacente(palmera, 75))

curitiba.adiciona_adjacente(Adjacente(sao_jose_dos_pinhas, 15))
curitiba.adiciona_adjacente(Adjacente(araucaria, 37))
curitiba.adiciona_adjacente(Adjacente(campo_largo, 29))
curitiba.adiciona_adjacente(Adjacente(balsa_nova, 51))

palmeira.adiciona_adjacente(Adjacente(irati, 75))
palmeira.adiciona_adjacente(Adjacente(campo_largo, 55))
palmeira.adiciona_adjacente(Adjacente(sao_mateus_do_sul, 77))

mafra.adiciona_adjacente(Adjacente(lapa, 57))
mafra.adiciona_adjacente(Adjacente(canoinhas, 66))
mafra.adiciona_adjacente(Adjacente(tijucas_do_sul, 99))

campo_largo.adiciona_adjacente(Adjacente(palmeira, 55))
campo_largo.adiciona_adjacente(Adjacente(curitiba, 29))
campo_largo.adiciona_adjacente(Adjacente(balsa_nova, 22))

balsa_nova.adiciona_adjacente(Adjacente(campo_largo, 22))
balsa_nova.adiciona_adjacente(Adjacente(contenda, 19))
balsa_nova.adiciona_adjacente(Adjacente(curitiba, 51))

lapa.adiciona_adjacente(Adjacente(mafra, 57))
lapa.adiciona_adjacente(Adjacente(contenda, 26))
lapa.adiciona_adjacente(Adjacente(são_mateus_do_sul, 60))

tijucas_do_sul.adiciona_adjacente(Adjacente(mafra, 99))
tijucas_do_sul.adiciona_adjacente(Adjacente(sao_jose_dos_pinhais, 49))

araucaria.adiciona_adjacente(Adjacente(curitiba, 37))
araucaria.adiciona_adjacente(Adjacente(contenda, 18))
sao_jose_dos_pinhais.adiciona_adjacente(Adjacente(curitiba, 15))
sao_jose_dos_pinhais.adiciona_adjacente(Adjacente(tijucas_do_sul, 49))

contenda.adiciona_adjacente(Adjacente(balsa_nova, 19))
contenda.adiciona_adjacente(Adjacente(araucaria, 18))
contenda.adiciona_adjacente(Adjacente(lapa, 26))

grafo = Grafo()

//o usuario digita qual será o seu ponto inicial( que no exemplo é Porto União)//
grafo.porto_uniao.mostra_adjacentes()

// será exibido para o usuario, as opçõess de caminho  que ele pode percorer para chegar até o seu destino.//
// sendo assim, as tres opçoes é : Paulo_Frontini sendo o caminho mais perto; São mateus; e canoinhas//
paulo_frontini -> 46
são_mateus_do_sul -> 87
canoinhas -> 78


*BUSCA GULOSA*

class Gulosa:
  def __init__(self, objetivo):
    self.objetivo = objetivo
    self.encontrado = False

  def buscar(self, atual):
    print('-------')
    print('Atual: {}'.format(atual.rotulo))
    atual.visitado = True

    if atual == self.objetivo:
      self.encontrado = True
    else:
      vetor_ordenado = VetorOrdenado(len(atual.adjacentes))
      for adjacente in atual.adjacentes:
        if adjacente.vertice.visitado == False:
          adjacente.vertice.visitado == True
          vetor_ordenado.insere(adjacente.vertice)
      vetor_ordenado.imprime()

      if vetor_ordenado.valores[0] != None:
        self.buscar(vetor_ordenado.valores[0])
        
busca_gulosa = Gulosa(grafo.curitiba) // local inicial//
busca_gulosa.buscar(grafo.portoUniao) // local de destino final//

// o resultado será//
Atual: Porto União 
[0]: Curitiba -> 0
[1]: Campo Largo -> 27
[2]: Contenda -> 39
[3]: Palmeira -> 59
[4]: Lapa -> 74




*BUSCA A*

class BuscaAEstrela:
  def __init__(self, objetivo):
    self.objetivo = objetivo
    self.encontrado = False
  
  def buscar(self, atual):
    print("---------------")
    print(f"Cidade Atual: {atual.rotulo}")

    if atual == self.objetivo:
      self.encontrado = True
      print("Objetivo encontrado! :D")
    else:
      vetor_ordenado = VetorOrdenado(len(atual.adjacentes))
      for adjacente in atual.adjacentes:
        if adjacente.vertice.visitado == False:
          adjacente.vertice.visitado = True
          vetor_ordenado.insere(adjacente)
      vetor_ordenado.imprime()

      if vetor_ordenado.valores[0] != None:
        self.buscar(vetor_ordenado.valores[0].vertice)

busca_aestrela = BuscaAEstrela(grafo.curitiba)
busca_aestrela.buscar(grafo.porto_uniao)
  


// resultados finais será ///

Cidade Atual: porto_uniao // usuario irá digita o seu ponto inicial//
0-  canoinhas  - Custo: 78  - Distância em linha reta: 141  - Soma: 219  // o sistema dará a  primeira opção de caminho que ele pode seguir  com maior distancia e maior custo//
1 -  mafra   - Custo: 66  - Distância em linha reta: 94  - Soma: 160     // o sistema dará a segunda opção de caminho que ele pode seguir com menor distancia e menos custo//


Cidade Atual: mafra // o usuario escolheu a segunda opção que ele quer seguir que é  pelo caminho com menor distancia//
0 -  tijucas_do_sul  - Custo: 99  - Distância em linha reta: 56  -  Soma: 155   // o sistema dará a terceira opção de caminho para ele continuar seguindo viagem com maior distancia e maior custo// 
1- sao_jose_dos_pinhais  - Custo: 49  - Distância em linha reta: 13  - Soma: 62 // o sistema dará a quarta opção de caminho para ele continuae seguindo viagem com menor distancia e menor custo//

Cidade Atual: sao_jose_dos_pinhais // o usuario escolheu seguir pelo caminho com menor distancia, que foi a quarta opção//
0-  curitiba  - Custo: 15  - Distância em linha reta: 0  - Soma: 15 

Cidade Atual: curitiba // o usuario chegou no seu destino//

Objetivo encontrado!   







